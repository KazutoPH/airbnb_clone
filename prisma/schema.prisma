// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// user Model
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  farvoriteIds String[] @db.ObjectId

  acount Account[]
  listings Listing[]
  reservations Reservation[]
}

// user Accout Model
model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String? @db.String
    expires_at Int?
    token_type String?
    scope String? 
    id_token String? @db.String
    seasion_state String?

    // relation of id to the user
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    //make a unique combination of 2 data
    @@unique([provider, providerAccountId])
}

// List of hotel model
model Listing {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    imageSrc String
    createdAt DateTime @default(now())
    category String
    roomCount Int
    bathroomCount Int
    guestCount Int
    localtionValue String
    userId String @db.ObjectId
    price Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    reservations Reservation[]
}

// Reservation Model
model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  enDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}